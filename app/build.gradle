apply plugin: 'com.android.application'
// 应用com.google.protobuf
apply plugin: 'com.google.protobuf'

android {
    compileSdkVersion 28


    defaultConfig {
        applicationId "com.example.javaadvanced"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true


        //generatedDensities = ['xhdpi','xxhdpi']
        vectorDrawables.useSupportLibrary = true

        resConfigs 'en'     //只适配英语
        //resConfigs 'en','cn' //适配英语和中文

        ndk{
            abiFilters "armeabi-v7a"
            //abiFilters "armeabi","armeabi-v7a"
        }

    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

/*        debug {
            shrinkResources true //开启资源压缩
            minifyEnabled true //开启代码混淆压缩
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }*/
    }


    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
            }
/*            resources  {
                srcDir 'src/main/proto' //这里main下面存放.proto文件的目录名称不能为protobuf
            }*/

            proto {
                srcDir 'src/main/java/com/example/javaadvanced/performanceOptimization/storage/proto'
            }
        }
    }

}


protobuf {
    //配置protoc编译器
    protoc {
        artifact = 'com.google.protobuf:protoc:3.5.1'
    }
    //这里配置生成目录，编译后会在build的目录下生成对应的java文件
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
            }
            task.builtins {
                java {}
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation files('libs\\asm-5.0.4.jar')
    implementation files('libs\\cglib-3.2.5.jar')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'





    //序列化start
    implementation 'com.google.protobuf:protobuf-java:3.4.0'
    implementation 'com.google.code.gson:gson:2.8.5'

    //如何配置jackson https://mvnrepository.com/search?q=jackson
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.8'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.9.8'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.9.8'

    implementation 'com.alibaba:fastjson:1.2.57'
    //序列化end


    implementation "androidx.core:core-ktx:+"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation "androidx.recyclerview:recyclerview:1.0.0"
    implementation 'androidx.cardview:cardview:1.0.0'

    implementation 'com.github.bumptech.glide:glide:4.5.0'

    implementation 'com.android.volley:volley:1.1.0'
    implementation 'com.squareup.okhttp3:okhttp:3.4.1'
    implementation 'com.yuyh.bubble:library:1.0.0'

    implementation 'com.google.protobuf:protobuf-java:3.5.1'

    //implementation 'com.google.android.material:material:1.0.0'


    implementation("com.squareup.okhttp3:okhttp:4.0.1")
    testImplementation("com.squareup.okhttp3:mockwebserver:4.0.1")

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.2'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.2'

/*
    // 新版本的leakcanary
    // debugImplementation because LeakCanary should only run in debug builds.
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.5'

    */


    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-runtime:2.2.0'




    implementation project(path: ':annotations') //项目中需要用到的注解，注解处理器会使用这些注解
    annotationProcessor project(path: ':annotation_compiler')  //注解处理器

    //auto-service自动完成注册注解处理器，注解处理器注册后才能使用
    annotationProcessor 'com.google.auto.service:auto-service:1.0-rc4'
    compileOnly 'com.google.auto.service:auto-service:1.0-rc4'


    implementation 'com.google.dagger:dagger:2.4'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.4'


}
